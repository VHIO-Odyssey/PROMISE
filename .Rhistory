dat_exp_norm_thym <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_thym.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_kich <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_kich.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_brca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_brca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_laml <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_laml.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_kirc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_kirc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_paad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_paad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_prad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_prad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_coad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_coad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_stad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_stad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_tgct <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_tgct.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_read <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_read.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_luad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_luad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_chol <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_chol.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lgg <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lgg.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lusc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lusc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_ucec <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_ucec.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_skcm <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_skcm.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_thca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_thca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_kirp <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_kirp.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_pcpg <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_pcpg.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_meso <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_meso.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_esca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_esca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_ucs <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_ucs.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_gbm <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_gbm.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_sarc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_sarc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_ov <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_ov.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_uvm <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_uvm.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_cesc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_cesc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_acc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_acc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lung <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lung.tsv", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# Expression LUAD vs LUSC
dat_exp_and_clinical_lung <- merge(dat_exp_norm_lung,dat, by="SAMPLE_ID")
View(dat_exp_norm_lung)
names(dat_exp_norm_lung)[names(dat_exp_norm_lung) == "sample"] <- "SAMPLE_ID"
dat_exp_and_clinical_lung <- merge(dat_exp_norm_lung,dat, by="SAMPLE_ID")
# Expression LUAD vs LUSC
names(dat_exp_norm_lung)[names(dat_exp_norm_lung) == "sample"] <- "SAMPLE_ID"
dat_exp_and_clinical_lung <- merge(dat_exp_norm_lung,dat, by="SAMPLE_ID")
fig <- plot_ly(data=dat_exp_and_clinical_lung, x= ~histological_type, y = ~as.numeric(FGFR4), type = "box", color=~histological_type,  boxpoints = "all", pointpos = 0)
fig <- fig %>% layout(title="FGFR4 expression in LUNG according histological type (n=1026)", xaxis = list(title = "Histological type"), yaxis = list(title = "FGFR4 expression"), showlegend=FALSE)
fig
View(dat_exp_and_clinical_lung)
# Expression LUAD vs LUSC
names(dat_exp_norm_lung)[names(dat_exp_norm_lung) == "sample"] <- "SAMPLE_ID"
dat_exp_and_clinical_lung <- merge(dat_exp_norm_lung,dat, by="SAMPLE_ID")
fig <- plot_ly(data=dat_exp_and_clinical_lung, x= ~histological_type, y = ~as.numeric(FGFR4.x), type = "box", color=~histological_type,  boxpoints = "all", pointpos = 0)
fig <- fig %>% layout(title="FGFR4 expression in LUNG according histological type", xaxis = list(title = "Histological type"), yaxis = list(title = "FGFR4 expression"), showlegend=FALSE)
fig
names(dat_exp_norm_cesc)[names(dat_exp_norm_cesc) == "sample"] <- "SAMPLE_ID"
dat_exp_and_clinical_cesc <- merge(dat_exp_norm_cesc,dat, by="SAMPLE_ID")
fig <- plot_ly(data=dat_exp_and_clinical_cesc, x= ~histological_type, y = ~as.numeric(FGFR4.x), type = "box", color=~histological_type,  boxpoints = "all", pointpos = 0)
fig <- fig %>% layout(title="FGFR4 expression in CESC according histological type", xaxis = list(title = "Histological type"), yaxis = list(title = "FGFR4 expression"), showlegend=FALSE)
fig
# Read in your count data
library(readr)
OmicsExpressionGenesExpectedCountProfile <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile.csv")
OmicsExpressionGenesExpectedCountProfile <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
View(OmicsExpressionGenesExpectedCountProfile)
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
View(counts_cd36)
counts_cd46_t <- t(counts_cd36)
View(counts_cd46_t)
colnames(counts_cd46_t) <- counts_cd46_t[1,]
counts_cd46_t <- counts_cd46_t[-1, ]
View(counts_cd36)
counts_cd46_t <- t(counts_cd36[, -1])
View(counts_cd46_t)
colnames(counts_cd46_t) <- counts_cd36[, 1]
View(counts_cd46_t)
counts_cd36 <- counts_cd36[, -1]
View(counts_cd36)
View(counts_cd36)
View(counts_cd46_t)
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
View(counts_cd36)
rownames(gene_data) <- gene_data[[...1]]
rownames(counts_cd36) <- counts_cd36[[...1]]
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
View(counts_cd36)
rownames(counts_cd36) <- counts_cd36[["sample_id"]]
View(counts_cd36)
counts_cd46_t <- t(counts_cd36[, -1])
View(counts_cd46_t)
View(counts_cd36)
counts_cd36 <- counts_cd36[, -1]
counts_cd46_t <- t(counts_cd36)
View(counts_cd46_t)
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
rownames(counts_cd36) <- counts_cd36[["sample_id"]]
counts_cd36 <- counts_cd36[, -1]
View(counts_cd36)
rownames(counts_cd36) <- counts_cd36[["sample_id"]]
View(counts_cd36)
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
counts_cd36
rownames(counts_cd36) <- counts_cd36[["sample_id"]]
counts_cd36_df <- as.data.frame(counts_cd36)
rownames(counts_cd36_df) <- counts_cd36_df[["sample_id"]]
View(counts_cd36_df)
counts_cd36_df <- counts_cd36_df[, -1]
View(counts_cd36)
counts_cd36_df
View(counts_cd36)
counts_cd36_df <- counts_cd36[, -1]
View(counts_cd36_df)
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
View(counts_cd36)
counts_cd36_df <- as.data.frame(counts_cd36)
View(counts_cd36_df)
rownames(counts_cd36_df) <- counts_cd36_df[["sample_id"]]
View(counts_cd36_df)
counts_cd36_df$sample_id <- NULL
View(counts_cd36_df)
counts_cd46_t <- t(counts_cd36_df)
View(counts_cd46_t)
counts <- read.delim("gene_lenght_cd36.txt", header = TRUE, row.names = 1)
counts <- read.delim("gene_length_cd36.txt", header = TRUE, row.names = 1)
# Create a DGEList object
dge <- DGEList(counts = counts)
# Load edgeR library
library(edgeR)
# Load edgeR library
library(edgeR)
# Install edgeR if you haven't already installed it
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
# Load edgeR library
library(edgeR)
# Create a DGEList object
dge <- DGEList(counts = counts)
counts <- t(counts_cd36_df)
# Create a DGEList object
dge <- DGEList(counts = counts)
View(counts)
View(counts_cd36_df)
counts_cd36_df_filtered <- counts_cd36_df[counts_cd36_df$`CD36 (ENSG00000135218)` != 0]
counts_cd36_df$`CD36 (ENSG00000135218)` != 0
counts_cd36_df_filtered <- counts_cd36_df[counts_cd36_df$`CD36 (ENSG00000135218)` != 0,]
counts_cd36 <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile_CD36.csv")
counts_cd36_df <- as.data.frame(counts_cd36)
counts_cd36_df_filtered <- counts_cd36_df[counts_cd36_df$`CD36 (ENSG00000135218)` != 0,]
View(counts_cd36_df_filtered)
rownames(counts_cd36_df_filtered) <- counts_cd36_df_filtered[["sample_id"]]
counts_cd36_df_filtered$sample_id <- NULL
counts <- t(counts_cd36_df_filtered)
# Create a DGEList object
dge <- DGEList(counts = counts)
# Estimate normalization factors
dge <- calcNormFactors(dge)
# Calculate effective library size
lib.size <- colSums(dge$counts) / dge$samples$norm.factors
# Get gene lengths (replace 'gene_lengths.txt' with your file containing gene lengths)
gene_lengths <- read.delim("gene_length_cd36.txt", header = TRUE)
# Read in your count data
library(readr)
# Get gene lengths (replace 'gene_lengths.txt' with your file containing gene lengths)
gene_lengths <- read.delim("gene_length_cd36.txt", header = TRUE)
gene_lengths <- read_excel("C:/Anna/ONA/fpkm_transformation/gene_length_cd36.xlsx")
# Get gene lengths (replace 'gene_lengths.txt' with your file containing gene lengths)
library(readxl)
gene_lengths <- read_excel("C:/Anna/ONA/fpkm_transformation/gene_length_cd36.xlsx")
View(gene_lengths)
# Calculate FPKM
fpkm <- dge$counts / gene_lengths$Length * 1e9 / lib.size
gene_lengths$Length
dge$counts
lib.size
gene_lengths$Length_num <- as.numeric(gene_lengths$Length)
# Calculate FPKM
fpkm <- dge$counts / gene_lengths$Length_num * 1e9 / lib.size
View(fpkm)
# Read in your count data
library(readr)
counts <- read_csv("C:/Anna/ONA/fpkm_transformation/OmicsExpressionGenesExpectedCountProfile.csv")
View(counts)
row_sums <- rowSums(counts[, -1])
row_sums
# Add the row sums as a new column to the dataframe
counts$RowSums <- row_sums
View(counts)
col_sums <- colSums(counts[, -1])
# Add the column sums as a new row to the dataframe
data_row <- c("Total", col_sums)
data_row
data <- rbind(counts, data_row)
View(data)
View(counts)
row_sums
#!/usr/bin/env Rscript
token <- "7F501970E6B295A5D79E80458A9283C2"
url <- "https://redcap.vhio.net/redcap/api/"
formData <- list("token"=token,
content='report',
format='csv',
report_id='1032',
csvDelimiter='',
rawOrLabel='raw',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
View(result)
formData <- list("token"=token,
content='record',
action='export',
format='csv',
type='flat',
csvDelimiter='',
'forms[0]'='baseline_information',
rawOrLabel='raw',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
View(result)
shiny::runApp('C:/GitHub_repos/redcap_viewer')
#!/usr/bin/env Rscript
token <- "5166A6FA5CC2E62593EFA1362346D772"
url <- "https://redcap.vhio.net/redcap/api/"
formData <- list("token"=token,
content='metadata',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
View(result)
formData <- list("token"=token,
content='metadata',
format='csv',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
library(odytools)
devtools::install_github("VHIO-Odyssey/odytools")
detach("package:odytools", unload = TRUE)
library(odytools)
runApp('C:/GitHub_repos/redcap_viewer')
runApp('C:/GitHub_repos/redcap_viewer')
devtools::install_github("VHIO-Odyssey/odytools")
detach("package:odytools", unload = TRUE)
devtools::install_github("VHIO-Odyssey/odytools")
runApp('C:/GitHub_repos/redcap_viewer')
# TCGA data
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "172.27.254.6", Database = "TCGA", UID = "Odyssey1", PWD = "mHXH5jLdGG2K8QEg", Port = 1433)
knitr::opts_chunk$set(echo=FALSE)
library(odbc)
library(plotly)
library(shiny)
library(readr)
library(plotly)
library(readr)
library(RColorBrewer)
library(stringr)
library(dplyr)
library(readxl)
library(tidyr)
library(dplyr)
library(cowplot)
# TCGA data
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "172.27.254.6", Database = "TCGA", UID = "Odyssey1", PWD = "mHXH5jLdGG2K8QEg", Port = 1433)
dat <- dbGetQuery(con, 'select * from mRNA_exp_FGFR4 e join Clinical_data c on c.bcr_patient_barcode =  SUBSTRING(SAMPLE_ID, 0, 13)')
dat_exp <- dbGetQuery(con, 'select * from mRNA_exp_FGFR4')
# COLORECTAL
dat_path_colon_kras <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\alterations_across_samples_COLORECTAL.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_colon_msi <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\colon_MSI.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
#LUNG
dat_path_lung <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\alterations_across_samples_LUNG.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_lung <- dbGetQuery(con, "select *
from Clinical_data c
left join mRNA_exp_FGFR4 e on c.bcr_patient_barcode =  SUBSTRING(SAMPLE_ID, 0, 13)
where type in ('LUAD', 'LUSC')")
# BREAST
dat_path_breast <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\breast_tripleneg.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# GASTRIC
dat_path_gastric <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\stad_tcga_pub_clinical_data_GASTRIC.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_cna_gastric <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\cna_STAD.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_msi_gastric <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\msi_STAD.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# KIDNEY
dat_path_kidney_all <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\histology_KIDNEY.tsv", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
knitr::opts_chunk$set(echo=FALSE)
library(odbc)
library(plotly)
library(shiny)
library(readr)
library(plotly)
library(readr)
library(RColorBrewer)
library(stringr)
library(dplyr)
library(readxl)
library(tidyr)
library(dplyr)
library(cowplot)
# TCGA data
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "172.27.254.6", Database = "TCGA", UID = "Odyssey1", PWD = "mHXH5jLdGG2K8QEg", Port = 1433)
dat <- dbGetQuery(con, 'select * from mRNA_exp_FGFR4 e join Clinical_data c on c.bcr_patient_barcode =  SUBSTRING(SAMPLE_ID, 0, 13)')
#################################################################################
## Analysis with pathological data
#################################################################################
dat_exp <- dbGetQuery(con, 'select * from mRNA_exp_FGFR4')
# COLORECTAL
dat_path_colon_kras <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\alterations_across_samples_COLORECTAL.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_colon_msi <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\colon_MSI.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
#LUNG
dat_path_lung <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\alterations_across_samples_LUNG.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_lung <- dbGetQuery(con, "select *
from Clinical_data c
left join mRNA_exp_FGFR4 e on c.bcr_patient_barcode =  SUBSTRING(SAMPLE_ID, 0, 13)
where type in ('LUAD', 'LUSC')")
# BREAST
dat_path_breast <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\breast_tripleneg.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# GASTRIC
dat_path_gastric <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\stad_tcga_pub_clinical_data_GASTRIC.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_cna_gastric <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\cna_STAD.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_msi_gastric <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\msi_STAD.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# KIDNEY
dat_path_kidney_all <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\histology_KIDNEY.tsv", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# LIVER (HCC - Hepatocarcinoma)
dat_path_hcc <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\virus_LIVER_HEPATOCELLULAR.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# CHOL
dat_idh_chol <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\idh_CHOL.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
# OV
dat_brca_ov <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\brca_OV.txt", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
##################################################
##### FGFR expression normalized in each cohort
##################################################
dat_exp_norm_blca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_blca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_dlbc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_dlbc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lihc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lihc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_thym <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_thym.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_kich <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_kich.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_brca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_brca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_laml <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_laml.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_kirc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_kirc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_paad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_paad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_prad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_prad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_coad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_coad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_stad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_stad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_tgct <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_tgct.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_read <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_read.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_luad <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_luad.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_chol <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_chol.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lgg <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lgg.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lusc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lusc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_ucec <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_ucec.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_skcm <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_skcm.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_thca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_thca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_kirp <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_kirp.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_pcpg <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_pcpg.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_meso <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_meso.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_esca <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_esca.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_ucs <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_ucs.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_gbm <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_gbm.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_sarc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_sarc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_ov <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_ov.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_uvm <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_uvm.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_cesc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_cesc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_acc <- read.table('C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_acc.tsv', header=TRUE, sep='\t', dec = '.',check.names=FALSE)
dat_exp_norm_lung <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_lung.tsv", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
dat_xena_brca_pam50 <- read.table("C:\\Anna\\ONA\\Data\\TCGA data\\XENA_data\\xenaDownload_brca_pam50.tsv", header=TRUE, sep="\t", dec = ".",check.names=FALSE)
fig2 <- plot_ly(data=dat_ov, x= ~brca2_mut, y = ~as.numeric(FGFR4), type = "box", color=~brca2_mut,  boxpoints = "all", pointpos = 0)
fig2 <- fig2 %>% layout(title="", xaxis = list(title = "BRCA2 mutation"), yaxis = list(title = "FGFR4 expression"), showlegend=FALSE)
dat_brca_pam50 <- merge(dat_exp_norm_brca,dat_xena_brca_pam50, by="sample")
View(dat_brca_pam50)
fig <- plot_ly(data=dat_brca_pam50, x= dat_brca_pam50$PAM50_mRNA_nature2012, y = ~as.numeric(FGFR4), type = "box", color=~PAM50_mRNA_nature2012,  boxpoints = "all", pointpos = 0)
fig <- fig %>% layout(title="", xaxis = list(title = "PAM50"), yaxis = list(title = "FGFR4 expression"), showlegend=FALSE)
fig
dat_brca_pam50_filter <- subset(dat_brca_pam50, dat_brca_pam50$PAM50_mRNA_nature2012 != '')
View(dat_brca_pam50_filter)
dat_brca_pam50 <- subset(dat_brca_pam50, dat_brca_pam50$PAM50_mRNA_nature2012 != '')
fig <- plot_ly(data=dat_brca_pam50, x= dat_brca_pam50$PAM50_mRNA_nature2012, y = ~as.numeric(FGFR4), type = "box", color=~PAM50_mRNA_nature2012,  boxpoints = "all", pointpos = 0)
fig <- fig %>% layout(title="", xaxis = list(title = "PAM50"), yaxis = list(title = "FGFR4 expression"), showlegend=FALSE)
fig
token <- "8C1D272F0FAC39C3A4D22C6B8909467C"
url <- "https://redcap.vhio.net/redcap/api/"
formData <- list("token"=token,
content='report',
format='csv',
report_id='',
csvDelimiter='',
rawOrLabel='raw',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
formData <- list("token"=token,
content='report',
format='csv',
report_id='1340',
csvDelimiter='',
rawOrLabel='raw',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
View(result)
formData <- list("token"=token,
content='report',
format='csv',
report_id='1340',
csvDelimiter='',
rawOrLabel='label',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
## Processar les dades
data <- as.data.frame(result)
View(data)
data$histology2 <- ifelse(data$histology == "Other",  data$histology <- data$histology_other, data$histology)
s
## Processar les dades
data <- as.data.frame(result)
data$histology2 <- ifelse(data$histology == "Other", data$histology2 <- data$histology_other, data$histology)
# Remove duplicate rows from the dataframe
cna_mat <- unique(cna_mat)
EOSC4_cna_data$copies <- as.numeric(EOSC4_cna_data$copies)
# Fill in the matrix with copies values
for (i in 1:nrow(df_unique)) {
for (j in 1:length(unique(EOSC4_cna_data$EOSC4_sample_ID))) {
mat[i, j] <- sum(EOSC4_cna_data$copies[EOSC4_cna_data$gene == df_unique$gene[i] & EOSC4_cna_data$EOSC4_sample_ID == unique(EOSC4_cna_data$EOSC4_sample_ID)[j]])
}
}
#!/usr/bin/env Rscript
token <- "5166A6FA5CC2E62593EFA1362346D772"
url <- "https://redcap.vhio.net/redcap/api/"
formData <- list("token"=token,
content='report',
format='csv',
report_id='1387',
csvDelimiter='',
rawOrLabel='raw',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
View(result)
results <- as.data.fram(result)
results <- as.data.frame(result)
dat <- subset(results, results$redcap_repeat_instrument = 'requests')
dat <- subset(results, results$redcap_repeat_instrument == 'requests')
View(dat)
dat <- subset(results, results$redcap_repeat_instrument == 'requests' && results$oncotree_code != NA)
View(dat)
results$oncotree_code != NA
dat <- subset(results, results$redcap_repeat_instrument == 'requests' && results$oncotree_code !== NA)
View(dat)
dat <- subset(results, results$redcap_repeat_instrument == 'requests' && !is.na(results$oncotree_code))
View(dat)
dat <- subset(results, results$redcap_repeat_instrument == 'requests' & !is.na(results$oncotree_code))
View(dat)
shiny::runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
install.packages("shiny")
install.packages("highcharter")
shiny::runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
# Load necessary libraries
library(highcharter)
library(shiny)
library(readxl)
library(dplyr)
library(DT)  # For datatable
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
shiny::runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
docker build -t app.R
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
shiny::runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
runApp('C:/GitHub_repos/OMOP_timeline/OMOP_timeline_shiny')
shiny::runApp('C:/GitHub_repos/PROMISE')
shiny::runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
runApp('C:/GitHub_repos/PROMISE')
